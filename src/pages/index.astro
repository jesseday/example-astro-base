---
import Switch from '@components/flow/Switch.astro';
import Match from '@components/flow/Match.astro';
import Show from '@components/flow/Show.astro';

import Layout from '@layouts/Layout.astro';


import Section from '@components/ui/Section.astro';
import Hero from '@components/ui/Hero.astro';
import Testimonial from '@components/ui/Testimonial.astro';
import Duplex from '@components/ui/Duplex.astro';

const content = [
	'hero',
	'duplex',
	'testimonial',
	'card list',
]
---

<Layout title="Welcome to Astro.">
	<main>
	  {content.map((type) => (
			<Switch>
				<Match when={type === 'hero'}>
					<Hero />
				</Match>
				<Match when={() => type === 'duplex'}>
					<Section>
						<Duplex />
					</Section>
				</Match>
				<Match when={async () => type === 'testimonial'}>
					<Section>
						<Testimonial />
					</Section>
				</Match>
				<Match when={type === 'card list'}>
					{() => {
						// Technically if you need to, you can
						// place the child content in a function.  That way
						// you have access to the full power of JS.  I don't
						// really think I like this, but it's interesting to know.
						return (
							<Section>
								<Section>@todo: {type}</Section>
							</Section>
						)
					}}
				</Match>
				<Fragment slot="fallback">
					<Show when={import.meta.env.MODE === 'development'}>
						<Section>
							<p>Unknown type: {type}</p>
						</Section>
					</Show>
				</Fragment>
			</Switch>
		))}
	</main>
</Layout>

