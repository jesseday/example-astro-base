---
import Section, { type Props as SectionProps } from "./Section.astro";

export interface Props {
  contain?: boolean;
  forward?: SectionProps;
  presentation?: "off-center" | "default";
};

const Wrapper = Astro.props.contain ? Section : Fragment;
const forward = Astro.props.forward || {};
---

<Wrapper {...forward}>
  <div data-component-id="Duplex" data-presentation={Astro.props?.presentation || 'default'}>
    <slot name="content">
      <div>
        <h2>This is a Duplex component headline</h2>
        <p>Replace the defaults by passing in "content" and "aside" slots</p>
      </div>
    </slot>
    <div>
      <slot name="aside">
        <img src="https://picsum.photos/600/500" alt="Random image" />
      </slot>
    </div>
  </div>
</Wrapper>

<style>
  [data-component-id="Duplex"] {
    display: grid;
    grid-template-columns: 1fr;
    grid-column: 1 / -1;
    align-items: center;
    gap: 2rem;
    padding: var(--space-l-xl);
  }

  [data-component-id="Duplex"]:not([data-presentation="off-center"]) {
    /* 
     * calc is the width that i want it to break minus
     * the padding on the sides, the gap between the
     * elements, and the border around the section.
     */
    grid-template-columns: repeat(auto-fit, minmax(calc((767px / 2 ) - 1rem - 1rem - var(--space-l-xl) - 1px), 1fr));
  }

  [data-component-id="Duplex"] > :global(:last-child :is(picture, img)) {
    display: block;
    width: 100%;
    max-width: 100%;
    height: auto;
  }

  @container section (min-width: 768px) {
    [data-component-id="Duplex"][data-presentation="off-center"] {
      grid-template-columns: 6fr 4fr;
    }

    [data-component-id="Duplex"][data-presentation="off-center"] > :global(:last-child :is(img, picture)) {
      width: calc(100% + calc(var(--space-l-xl)));
      max-width: calc(100% + calc(var(--space-l-xl)));
      margin-right: calc(var(--space-l-xl) * -1);
      height: auto;
    }
  }
</style>
